package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xb1\xae\xc2\x30\x0c\x00\xf7\x7e\x85\x9f\xf7\xd7\xac\x0c\x6e\x96\x02\x2b\x08\x95\x81\xd1\x34\x86\x16\x25\x29\x4a\x2c\x04\x7f\x8f\x42\x60\x3a\xf9\xce\x92\x4d\x7f\xeb\x5d\x3f\x9c\xf6\x1b\x98\x34\x78\xdb\x50\x01\x78\x8e\xd7\x0e\x25\x62\x11\xc2\xce\x36\x00\x00\x14\x44\x19\xc6\x89\x53\x16\xed\xf0\x38\x6c\xff\x57\xf8\x4d\x3a\xab\x17\x7b\x90\xb0\xa8\x40\xcf\xf1\xc1\x99\x4c\x95\x75\x21\x8f\x69\xbe\x2b\xe4\x34\x76\xd8\x9a\x39\x3a\x79\xb6\xb7\x8c\xe0\xe4\x22\xc9\x92\xa9\xdd\x36\x64\xea\x41\x3a\x2f\xee\x55\xc6\x1f\x3f\xff\xbd\x03\x00\x00\xff\xff\x09\xac\x76\x75\xaf\x00\x00\x00")

func index_html() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

var _index_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5b\x6f\xdb\x38\x16\x7e\xcf\xaf\x38\x2b\x34\x88\xb4\xeb\x95\xbb\x05\xfa\xe2\x40\x05\x1a\xc7\xed\x76\x06\x6d\x0a\x3b\x45\xe6\x61\x80\x84\xa6\x8e\x6d\x22\x34\xe9\x21\xa9\xc8\x6e\xe1\xff\x3e\xe0\x45\x12\x65\xc7\x6d\x31\x18\xcc\x8b\x95\x9c\xfb\xe5\x3b\x87\x64\xba\xa8\x04\x35\x4c\x0a\x48\x6b\x26\x4a\x59\x0f\xa0\x94\xb4\x5a\xa3\x30\x19\x7c\x3b\x03\xe0\x68\xe0\xff\x37\xb3\xdb\xfb\xb7\xd7\xd7\xd3\xc9\x6c\x06\x05\x24\xb5\x1e\x0d\x87\xe7\xe7\x77\x93\xab\xfb\xd9\xcd\xf8\xd7\x49\xcb\x3c\x3f\x4f\xce\xce\xce\x00\x5a\xa3\x54\x21\x31\xf8\xe5\x43\xea\x8d\x79\x73\x73\x59\xee\xa0\x68\xfd\xe4\x7f\x54\xa8\x76\x33\xe4\x48\x8d\x54\x69\x62\xd9\x49\x76\xd6\x8a\x57\x0c\x8a\xa0\x0d\x40\x89\x78\x22\x7a\xd4\x29\x7b\x0f\x13\x8e\xf6\xbf\x34\xf1\xfc\x24\x1b\x04\xf9\x79\x65\x8c\x14\xdf\x51\x28\xd9\x53\x23\xbd\xf7\x3e\xad\xff\x9c\x6c\x36\x28\xca\xf1\x8a\xf1\x32\xad\x58\xee\xcd\x66\x97\x27\x05\x82\x9f\xec\xd2\xdb\x50\x68\x2a\x25\xa0\x62\x56\x63\xdf\x2f\x89\x14\x02\xa9\x99\x7e\x1e\xa7\x95\xe2\x03\x90\x62\xbc\x2e\xe3\xf2\xd4\x1a\x0a\x10\x58\xc3\x1d\xce\x67\x92\x3e\xa2\xb1\x82\xc1\x77\xad\x73\x29\xe4\x06\x05\x14\x9d\xc9\x14\x9f\x4c\xd6\x96\xa8\xd6\xb9\x46\x51\xa6\xbf\xcc\x6e\x3e\xe5\xda\x28\x26\x96\x6c\xb1\x4b\x1b\x36\x80\xd9\x6d\x70\x04\x09\x3e\xb9\x72\x70\x66\x3f\x9c\x2d\x90\xee\x28\xc7\x64\xd0\xca\x29\x24\xe5\x6e\x04\x46\x55\xd8\x10\xf7\x59\x16\x4a\xd5\x06\xb3\x46\xad\xc9\x12\x4f\xc7\x63\x73\x52\xa4\x1e\xaf\x4b\x9b\x18\x3e\x99\xbc\x24\x86\xe4\x7a\xc3\x99\x49\x93\xdf\x45\x12\x52\x03\x58\x48\x05\x29\x95\x42\x37\x0a\x20\x17\x8d\x6a\x67\x0f\x80\x2d\x20\xf5\xe4\xdc\x28\xb6\x4e\xb3\x9c\xa3\x58\x9a\x15\xbc\x81\x97\xb1\x1c\xf8\xe2\xa6\xb5\x1e\x80\xab\xc6\x86\x28\x8d\x41\x35\x6b\xdd\x36\xe9\x34\xdf\x28\x39\x54\x4a\xaa\xd3\xa9\xd9\x58\x25\xc7\xdc\x89\xa5\xc9\xdd\x6c\x04\x93\xe9\xf4\x66\x3a\x82\x04\xfe\xd3\xa6\x1a\x1c\xed\x8f\xa0\xa0\x36\x74\xfc\xf1\xda\x85\x57\xb1\x01\xd0\x3e\x0e\xa8\xd9\x42\x01\x2d\xf8\xf2\x25\x9a\xb1\x14\x06\xb7\x26\xbd\x78\x55\x5e\x34\x50\xd3\x35\x33\x74\x05\x29\x5d\x97\xb9\x20\x6b\x8c\xa2\x23\x1a\x21\xd1\x68\xc6\xce\xc0\x8c\x7d\xc5\x64\xd4\xe6\xdc\xa3\xa7\xd4\x6c\x7d\x00\x51\xf7\x2d\x84\x7b\xa6\x4a\x45\xea\x2b\xb9\x8d\x8c\x04\xca\xcf\xab\xdf\xe2\xd6\x1c\xe8\x5b\xd2\xcf\x19\xd0\x68\xae\xfc\x9c\xf5\xf3\x08\xc4\x5e\x21\x9f\xb3\x73\xdc\x81\x13\xca\xa1\x84\xc3\x21\x8c\x39\x12\x05\xb2\x32\x20\x79\xd9\x6e\x13\xc7\xed\xa6\xbe\xbf\xc1\xde\x72\x9e\x5e\xfc\xfb\x22\xcb\x17\x52\x4d\x08\x5d\xa5\x02\x8a\x37\x20\x72\x85\x6b\xf9\x84\x69\xd6\x34\x6e\x21\x55\x00\xbb\x37\x63\xc1\x6e\x9b\xd8\xac\x92\xde\x00\xcd\xe3\x85\x79\xb0\xc2\xbc\x42\x37\x46\xf3\xdc\x82\xc4\x61\x45\x18\x28\x82\x79\x07\x8e\x4e\x44\x0a\xca\x19\x7d\xec\x63\x3b\x1e\x9e\x1f\xae\x91\x83\x45\x12\xa2\x18\x44\x7c\x2d\x2b\x45\x71\xd4\x04\x40\x09\xe7\x73\x42\x1f\xef\x59\xd9\x49\x35\x1b\xa5\x1b\xc2\xa8\xae\xf1\x92\x9d\x9f\x1c\xa3\x13\x48\x0e\xb9\x50\xb3\x6d\x26\xa8\x66\xa5\x59\x41\xe1\xaa\x5c\x5f\x1e\x72\x57\xc8\x96\x2b\x13\xd8\xab\xe3\xc5\x7d\x8c\xd5\x68\x58\x37\x41\x6f\x23\x99\x30\x97\x2d\x59\x07\xb2\x36\x3b\x8e\x1d\xb9\xf1\x62\xfb\x14\xd0\x60\x77\x9a\xc9\x17\xd2\x76\xac\x28\x20\x49\xba\x5e\x34\x64\x48\x34\x11\xfa\xbf\x1a\x15\x5b\x24\x97\xd1\xaa\xf2\xba\x9a\x7d\x45\xa7\xfb\x32\x56\xf5\x54\xf8\xdf\xcb\x23\x79\xc2\xd9\x52\x3c\xe3\x2c\xd0\x21\xa1\x28\x0c\xaa\xe4\x48\x71\x4e\x34\x72\x26\xf0\x19\xdd\x8e\x05\xc9\x9a\x95\x25\xc7\x24\x3e\x5a\x6d\xee\x21\x97\x87\x17\xdf\x7c\x70\xfb\xcd\x16\xec\xdf\x96\xbe\x7f\x08\xd5\xb0\x6d\x09\x82\xf6\xd3\xf5\xca\x56\xec\x6d\x08\x30\x84\xda\x67\x5e\x75\x11\x74\xe1\x34\x56\xc3\xba\xe6\x72\x99\x5a\xb3\xae\x8b\x03\xab\x9a\x45\x5d\xd0\xf9\x82\x71\x7e\x4f\x25\x97\xaa\xcb\x4d\xa3\x79\xc7\x38\x9f\xd9\x46\x7a\x04\xf4\xe4\x9a\xc1\x72\x81\x33\xce\x1d\x50\x8c\x8b\x68\x00\x9b\x7c\x6b\x7f\x76\xd9\x61\xd3\xb4\x1d\x2c\xf9\x88\xcf\x38\x9b\x39\x46\xcf\x5d\x2c\x1b\xfd\xef\x50\xdd\x0b\xc0\x33\xbe\x1f\x82\x3f\xe3\xdc\x95\x2f\xf7\x27\x0d\x35\xdb\xe7\x41\xdf\x5b\xf0\x11\xe6\x55\x40\xb1\x42\x7a\x1a\xf2\x7f\x6f\x59\xa7\x48\x4d\xaa\x6c\x2e\x2a\xdf\xd9\x9f\xda\xfe\xac\xfe\xd9\xc2\xfe\x38\x08\x57\xc3\xe1\x10\xbe\x18\xc6\x0d\x33\x0c\xdd\x91\x11\x5d\x01\xb9\x54\xb7\x32\xc4\xd0\x44\x17\xee\x8c\x0f\x6a\x39\x27\xe9\x8b\x6f\x34\x57\xfb\x01\xd8\xef\x32\x7c\xe7\xe1\x4b\x60\x08\xaf\x5e\xbf\xde\x67\x0f\x6d\xbf\x5c\xe1\xa3\x52\x8e\x09\x5d\xb9\x21\x74\x7b\x22\xde\x94\x07\xd5\xee\xd5\xc7\x59\xb1\x3c\xdb\xc2\x5e\x8c\x51\x33\x5c\x79\x8f\x5c\xfd\xab\x28\xbc\x6a\x74\xfd\x08\x3d\x9b\x05\x8b\xd1\x0e\xdc\x1f\xc4\x1d\xf5\xe4\x74\xe4\x47\x8d\x0b\xfd\xf2\x6d\xfa\x0b\x29\x1c\x79\x3d\x91\x84\xdd\x20\x77\xe1\xe8\x70\xce\x8e\x21\x71\x3a\x47\x0f\x84\x8f\x84\x89\x38\x9d\x35\x61\xa2\xf7\x26\x72\x8f\x9c\xee\xb5\x14\xe6\x66\x38\x84\xc9\x6f\x9f\x6f\xa6\xb7\xf0\xee\x66\x0a\xd7\x93\xab\x2f\xef\xdf\x7f\xf8\xf4\x7e\x14\x0f\xaf\xd3\xb4\x0f\x8d\x66\xc5\x35\xaf\x8b\xf8\xd5\xd6\x9c\xb7\xee\x96\xe3\xc6\xb8\x78\x13\x9d\xf5\xcf\x5c\x44\x9b\x43\xd9\x6b\x66\x2d\xd2\x7c\xe4\x97\x67\xfb\xec\xf8\xc1\xf8\x67\x00\x00\x00\xff\xff\x97\x8c\x84\xd4\x4d\x0e\x00\x00")

func index_js() ([]byte, error) {
	return bindata_read(
		_index_js,
		"index.js",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"index.html": index_html,
	"index.js": index_js,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
	"index.js": &_bintree_t{index_js, map[string]*_bintree_t{
	}},
}}
